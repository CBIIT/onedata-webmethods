<?xml version="1.0"?>
<project name="Deploy" default="deployWM" basedir=".">
     
	<!-- Global Variables that concern the code and should be changed only if the code is changed -->
	<!-- Template for the Deployer Project Specification -->
	<property name="deployerProjectDefinitionTemplate" value="resources/ProjectSpecificationTemplate.xml"/>
	
	<!-- Target filename of the Deployer Project Specification for this run -->
	<property name="deployerProjectDefinition" value="${workspace.dir}/ProjectAutomator/${projectName}DeploymentSpec.xml"/>
	
	<!-- XSLT for the Deployer Project Specification - adding Repository and Project Sections -->
	<property name="initialXSLT" value="resources/setUpInitial.xslt"/>
 
        <!-- Target Deploy logfile -->
        <property name="deployLogFile" value="${stagingDir}/${projectName}Deploy.log"/>

	<target name="deployWM" description="main deploy task" depends="startDeployment, initPAandDeployerWindows, initPAandDeployerUnix, createProjectWM, performvariablesubstitionNew, CreateCheckpoint, triggerDeploy, RetrieveReport">
	</target>

	<target name="deployWMOnly" description="Deploy Only task" depends="startDeployment,initPAandDeployerWindows, initPAandDeployerUnix,triggerDeploy">
	</target>

	<target name="createProjectWM" description="Create Project task" depends="startDeployment, initPAandDeployerWindows, initPAandDeployerUnix, DeleteDeployLogFile, createDeployerSpec, execProjectAutomator">
	</target>

        <target name="performvariablesubstitionNew"  description="Perform Variable Substitution task">
		<if>
                    <equals arg1="${vsFile}" arg2=""/>
                    <then>
                        <echo message="No vsFile passed so skipping."/>
                    </then>
                    <else>
			<antcall target="performvariablesubstitution"/>
                    </else>
                </if>
        </target>

	<target name="performvariablesubstitution" description="Perform Variable Substitution task" depends="initPAandDeployerWindows, initPAandDeployerUnix,triggerVSCopy,triggerDeployVS">
	</target>

	<target name="startDeployment">		
		<echo message="Start deploying ${projectName}" />
	</target>

    <!-- determine which PA and Deployer executables are used - different for Windows and Unix -->
	<condition property="isWindows">
		<os family="windows" />
	</condition>

	<condition property="isUnix">
		<os family="unix" />
	</condition>

	<target name="initPAandDeployerWindows" if="isWindows">
		<property name="deployerExecutable" value="Deployer.bat" />
		<property name="deployerAutomatorExecutable" value="projectautomator.bat" />
	</target>

	<target name="initPAandDeployerUnix" if="isUnix">
		<property name="deployerExecutable" value="Deployer.sh" />
		<property name="deployerAutomatorExecutable" value="projectautomatorUnix.sh" />
	</target>
	<!-- determine which PA and Deployer executables are used - different for Windows and Unix -->
        
		
	<target name="createDeployerSpec" depends="cleanupDeployerSpec,setupDeployerSpec">		
	</target>
	
	<target name="cleanupDeployerSpec">
		<if>
			<available file="${deployerProjectDefinition}"/>
			<then>
				<delete file="${deployerProjectDefinition}"/>	
			</then>
		</if>	
	</target>
	
	<target name="setupDeployerSpec" description="Creates the project automator xml with XSLT based on the given variables.">				
		<xslt style="${initialXSLT}" in="${deployerProjectDefinitionTemplate}" out="${deployerProjectDefinition}">
			<!--build/deployer server props -->
			<param name="deployerHost" expression="${deployerHost}" />
			<param name="deployerPort" expression="${deployerPort}" />
			<param name="deployerUsername" expression="${deployerUsername}" />
			<param name="deployerPassword" expression="${deployerPassword}" />
                        <param name="vsFile" expression="${vsFile}" />
			
			<!--target server props IS1 & TN -->
			<param name="ISHost1" expression="${ISHost1}" />
			<param name="ISPort1" expression="${ISPort1}" />
			<param name="ISUsername1" expression="${ISUsername1}" />
			<param name="ISPassword1" expression="${ISPassword1}" />
			<param name="ISusessl1" expression="${ISusessl1}" />
			
			<!--target server props IS2 & TN -->
			<param name="ISHost2" expression="${ISHost2}" />
			<param name="ISPort2" expression="${ISPort2}" />
			<param name="ISusessl2" expression="${ISusessl2}" />
				
			<!--target server props APIGateway -->
			<param name="APIHost1" expression="${APIHost1}" />
			<param name="APIPort1" expression="${APIPort1}" />
			<param name="APIUsername1" expression="${APIUsername1}" />
			<param name="APIPassword1" expression="${APIPassword1}" />
			<param name="APIusessl1" expression="${APIusessl1}" />
			<param name="APIversion1" expression="${APIversion1}" />
				
			<!--target server props MWS1 -->
			<param name="MWSHost1" expression="${MWSHost1}" />
			<param name="MWSPort1" expression="${MWSPort1}" />
			<param name="MWSUsername1" expression="${MWSUsername1}" />
			<param name="MWSPassword1" expression="${MWSPassword1}" />
			<param name="MWSusessl1" expression="${MWSusessl1}" />
			<param name="MWSversion1" expression="${MWSversion1}" />
			
			<!--target server props MWS2 -->
			<param name="MWSHost2" expression="${MWSHost2}" />
			<param name="MWSPort2" expression="${MWSPort2}" />
			<param name="MWSusessl2" expression="${MWSusessl2}" />
			<param name="MWSversion2" expression="${MWSversion2}" />
			<!-- general props -->
			<param name="repoName" expression="${repositoryName}" />
			<param name="repoPath" expression="${buildOutputDir}" />
			<param name="projectName" expression="${projectName}" />
			<param name="isTransactionalDeployment" expression="${isTransactionalDeployment}"/>			
		</xslt>				
	</target>
	
		
	<target name="execProjectAutomator">
		<path id="pathProjectdefinition">
			<pathelement location="${deployerProjectDefinition}" />
		</path>
		<pathconvert refid="pathProjectdefinition" property="pathProjectdefinitionFile"/>
		
	        <echo message="${deployerInstallationPath}/${deployerAutomatorExecutable}"/>			
                <echo message="${pathProjectdefinitionFile}"/>
		<exec dir="${deployerInstallationPath}"  executable="${deployerInstallationPath}/${deployerAutomatorExecutable}" failonerror="true" resultproperty="appState" output="${deployLogFile}">
			<arg value="${pathProjectdefinitionFile}" />
		</exec>
		
		<if>			
			<equals arg1="${appState}" arg2="0" trim="true"/>			
			<then>
				<echo message ="Project Automator successfully executed."/>
			</then>
			<else>			    				
				<fail message="Project Automator failed."/>
			</else>
		</if>		
	</target>
	
	<target name="triggerDeploy">
		<exec executable="${deployerInstallationPath}/${deployerExecutable}" dir="${deployerInstallationPath}" failonerror="true" resultproperty="appState" output="${deployLogFile}">
			<arg value="--deploy"/>
			<arg line="-project ${projectName}"/>
			<arg line="-dc myDeployment"/>
			<arg line="-host ${deployerHost}"/>
			<arg line="-port ${deployerPort}"/>
			<arg line="-user ${deployerUsername}"/>
			<arg line="-pwd ${deployerPassword}"/>
			<arg value="-force"/>
		</exec>
		
		<if>			
		<equals arg1="${appState}" arg2="0" trim="true"/>			
			<then>
				<echo message="WMDeployer Deployment successfully executed."/>
			</then>
			<else>			    				
				<fail message="WMDeployer Deployment failed."/>
			</else>
		</if>		
	</target>

	<target name="DeleteDeployLogFile">
		<delete file="${deployLogFile}" />
	</target>

        <target name="triggerVSCopy">
 		<copy file="${stagingDir}/Assets/vs/${vsFile}" tofile="${deployerInstallationPath}/../replicate/inbound/${vsFile}" overwrite="true" />
                <exec executable="/bin/sh">
               		<arg value="-c"/>
                        <arg value="sed -i -e 's/??PROJECT??/${projectName}/g' ${deployerInstallationPath}/../replicate/inbound/${vsFile}"/>
                </exec>
        </target>

        <target name="triggerDeployVS">
               <exec executable="${deployerInstallationPath}/${deployerExecutable}" dir="${deployerInstallationPath}" failonerror="true" resultproperty="appState" output="${deployLogFile}">
 			<arg value="--import"/>
			<arg line="-varsub"/>
			<arg line="-vsFile ${vsFile}"/>
			<arg line="-map myDeploymentMap"/> 
                       	<arg line="-project ${projectName}"/>
			<arg line="-validate false"/>
                       	<arg line="-host ${deployerHost}"/>
                       	<arg line="-port ${deployerPort}"/>
                       	<arg line="-user ${deployerUsername}"/>
               		<arg line="-pwd ${deployerPassword}"/>
                </exec>
                <if>
                	<equals arg1="${appState}" arg2="0" trim="true"/>
                       	<then>
                              	<echo message="WMDeployer variable substitution successfully executed."/>
                       	</then>
                	<else>
                	       	<fail message="WMDeployer variable substitution failed."/>
	                </else>
               	</if>
        </target>

	<target name="CreateCheckpoint" depends="initPAandDeployerWindows, initPAandDeployerUnix">
        	<if>
                    <equals arg1="${isTransactionalDeployment}" arg2="false"/>
                    <then>
			<exec executable="${deployerInstallationPath}/${deployerExecutable}" dir="${deployerInstallationPath}" failonerror="true" resultproperty="appState" output="${deployLogFile}">
				<arg value="--checkpoint"/>
				<arg line="-project ${projectName}"/>
				<arg line="-dc myDeployment"/>
				<arg line="-host ${deployerHost}"/>
				<arg line="-port ${deployerPort}"/>
				<arg line="-user ${deployerUsername}"/>
				<arg line="-pwd ${deployerPassword}"/>
			</exec>
			<if>			
				<equals arg1="${appState}" arg2="0" trim="true"/>			
				<then>
					<echo message="WMDeployer Creating Checkpoint successfully executed."/>
				</then>
				<else>			    				
					<fail message="WMDeployer Creating Checkpoint failed."/>
				</else>
			</if>
		    </then>
		    <else>
			<echo message="Project is setup as a transactional Deployment therefore we can not create a checkpoint."/>
		    </else>
		</if>		
	</target>

	<target name="RetrieveReport" depends="initPAandDeployerWindows, initPAandDeployerUnix">
		<exec executable="${deployerInstallationPath}/${deployerExecutable}" dir="${deployerInstallationPath}" failonerror="true" resultproperty="appState" output="${deployLogFile}">
			<arg value="--showReport"/>
			<arg line="-candidate deploymentReport"/>
			<arg line="-project ${projectName}"/>
			<arg line="-dc myDeployment"/>
			<arg line="-id 1"/>
			<arg line="-host ${deployerHost}"/>
			<arg line="-port ${deployerPort}"/>
			<arg line="-user ${deployerUsername}"/>
			<arg line="-pwd ${deployerPassword}"/>
		</exec>
		
		<if>			
		<equals arg1="${appState}" arg2="0" trim="true"/>			
			<then>
				<echo message="WMDeployer Creating Checkpoint successfully executed."/>
			</then>
			<else>			    				
				<fail message="WMDeployer Creating Checkpoint failed."/>
			</else>
		</if>		
	</target>
</project>
