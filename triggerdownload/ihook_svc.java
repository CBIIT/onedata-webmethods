/*
 * This class has been automatically generated by Software AG Designer.
 *
 */

import java.io.*;
import java.util.Vector;
import java.util.Properties;
import com.wm.util.Table;
import com.wm.data.*;
import com.wm.util.coder.IDataCodable;
import com.wm.app.b2b.util.GenUtil;
import com.wm.app.b2b.client.Context;
import com.wm.app.b2b.client.ServiceException;
import com.webmethods.caf.common.CipherUtil;

public class ihook_svc{
    public static void main(String[] args)
    {
        // Connect to server - edit for alternate server

	Properties prop = new Properties();
	try (InputStream input = new FileInputStream(args[0])) {
	    //load a properties file from class path, inside static method
	    prop.load(input);
	} 
	catch (IOException ex) {
	    ex.printStackTrace();
	}

        String  server = prop.getProperty("server");
        Context context = new Context();

        // To use SSL:
        //
        // context.setSecure(true);

        // Optionally send authentication certificates
        //
        // String  cert    = "c:\\myCerts\\cert.der";
        // String  privKey = "c:\\myCerts\\privkey.der";
        // String  cacert  = "c:\\myCerts\\cacert.der";
        // context.setSSLCertificates(cert, privKey, cacert);

        // Set username and password for protected services
        String username = prop.getProperty("username");
        String password = "";
	try{
		password = CipherUtil.decrypt(prop.getProperty("password"));
	} catch (Exception e ){
		System.out.println(e.toString());
	}
        System.out.println("server="+server);
        System.out.println("username="+username);
        System.out.println("password="+password);

        try {
            context.connect(server, username, password);
        } catch (ServiceException e) {
            System.out.println("\n\tCannot connect to server \""+server+"\"");
            System.exit(0);
        }

        try
        {
        // Collect inputs (top-level only)
	    IData inputDocument = getInputs(prop);
        
            // *** Invoke the Service and Disconnect ***
            IData outputDocument = invoke(context, inputDocument);
            context.disconnect();
            System.out.println("\n********* Successful invoke **********");

            System.out.println("\n************* Outputs *****************");
            GenUtil.printRec(outputDocument, "Output");
            
        } catch (IOException e) {
            System.err.println(e);
        } catch (ServiceException e) {
            System.err.println(e);
        }
        System.exit(0);
    }

    
    // *** Collect Inputs *** //
    public static IData getInputs(Properties prop)
         throws IOException, ServiceException
    {
       return Input_getInputs(prop);
    }

    public static IData Input_getInputs(Properties prop)
         throws IOException, ServiceException
    {
         IData out = IDataFactory.create();
         IDataCursor idc = out.getCursor();
         idc.insertAfter("originalRowset", pub_onedata_hooks_actionRowset_getInputs(prop));
         idc.insertAfter("userId",prop.getProperty("USER_ID"));
         idc.destroy();
         return out;
    }

    public static IData pub_onedata_hooks_actionRowset_getInputs(Properties prop)
         throws IOException, ServiceException
    {
         IData out = IDataFactory.create();
         IDataCursor idc = out.getCursor();
         idc.insertAfter("rowset", pub_onedata_hooks_rowset_getInputs(prop));
         idc.destroy();
         return out;
    }

    public static IData pub_onedata_hooks_rowset_getInputs(Properties prop)
         throws IOException, ServiceException
    {
         IData out = IDataFactory.create();
         IDataCursor idc = out.getCursor();

         IData[] rows = new IData[1];
         rows[0] = pub_onedata_hooks_rowset_rows_getInputs(prop);
         idc.insertAfter("rows", rows);
         idc.destroy();
         return out;
    }

    public static IData pub_onedata_hooks_rowset_rows_getInputs(Properties prop)
         throws IOException, ServiceException
    {
         IData out = IDataFactory.create();
         IDataCursor idc = out.getCursor();
	 idc.insertAfter("DLOAD_FMT_ID",prop.getProperty("DLOAD_FMT_ID"));
	 idc.insertAfter("EMAIL_ADDR",prop.getProperty("EMAIL_ADDR"));
	 idc.insertAfter("CREATED_BY",prop.getProperty("CREATED_BY"));
	 idc.insertAfter("HDR_ID",prop.getProperty("HDR_ID"));
         idc.destroy();
         return out;
    }

    public static void getOutputs(IData pipeline)
         throws IOException, ServiceException
    {

	IDataCursor pipelineCursor = pipeline.getCursor();
	String	message = IDataUtil.getString( pipelineCursor, "message" );
	pipelineCursor.destroy();
    }

    public static String getString(String name)
         throws IOException, ServiceException
    {
         System.out.print(name + " =");
         return (new BufferedReader(new InputStreamReader(System.in))).readLine();
    }


    public static IData invoke(
        Context context, IData inputDocument)
        throws IOException, ServiceException
    {
         IData out = context.invoke("OneDataIHook", "ihook_svc", inputDocument);
         IData outputDocument = out;
         return outputDocument;
    }
}

